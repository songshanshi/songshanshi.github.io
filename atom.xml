<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>嵩山石&#39;s blogs</title>
  
  <subtitle>踮起脚尖，另一种高度</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://songshanshi.github.io/"/>
  <updated>2019-07-28T07:12:29.074Z</updated>
  <id>https://songshanshi.github.io/</id>
  
  <author>
    <name>嵩山石</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo博客迁移记录</title>
    <link href="https://songshanshi.github.io/2019/07/28/%E5%AE%89%E8%A3%85hexo/"/>
    <id>https://songshanshi.github.io/2019/07/28/安装hexo/</id>
    <published>2019-07-28T07:12:28.929Z</published>
    <updated>2019-07-28T07:12:29.074Z</updated>
    
    <content type="html"><![CDATA[<p>本文并不是从头开始搭建hexo博客的教程，而是因为最近个人重装了电脑系统，需求迁移原来搭建好的hexo博客，为了防止将来还需要迁移，特记录下操作流程，以便将来查看。</p><p>迁移博客的工作量要比从头开始搭建简单很多，很多插件的服务端配置都不需要重新设置，只需要在本地做相应的操作即可。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>第一步当然是安装相应的软件和配置好环境。需要安装的软件有Node.js和Git,去官网下载安装即可。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git -v</span><br><span class="line">node -v</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p><h3 id="git更换源"><a href="#git更换源" class="headerlink" title="git更换源"></a>git更换源</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org </span><br><span class="line">npm info underscore (输出正常反馈信息则说明换源成功)</span><br></pre></td></tr></table></figure><h3 id="hexo部署插件"><a href="#hexo部署插件" class="headerlink" title="hexo部署插件"></a>hexo部署插件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">本地测试的时候需要用hexo server</span><br><span class="line">npm i hexo-server</span><br><span class="line">将文章部署到github上的模块</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">安装RSS插件</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">添加Sitemap,加速网页收录速度</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>.deploy：执行hexo deploy命令部署到GitHub上的内容目录<br>public：执行hexo generate命令，输出的静态网页内容目录<br>scaffolds：layout模板文件目录，其中的md文件可以添加编辑<br>scripts：扩展脚本目录，这里可以自定义一些javascript脚本<br>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<br>_drafts：草稿文章<br>_posts：发布文章<br>themes：主题文件目录<br>_config.yml：全局配置文件，大多数的设置都在这里<br>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</p><p>Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使在线生成了README .md，它也会在你下一次部署时被删去。怎么解决呢？<br>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p><h3 id="hexo博客更新博文"><a href="#hexo博客更新博文" class="headerlink" title="hexo博客更新博文"></a>hexo博客更新博文</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g       <span class="comment"># 初始化文件</span></span><br><span class="line">hexo s       <span class="comment"># 本地部署</span></span><br><span class="line">hexo d       <span class="comment"># 发布到github</span></span><br></pre></td></tr></table></figure><p>先记录到这，一会出现问题都会在这里更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文并不是从头开始搭建hexo博客的教程，而是因为最近个人重装了电脑系统，需求迁移原来搭建好的hexo博客，为了防止将来还需要迁移，特记录下操作流程，以便将来查看。&lt;/p&gt;
&lt;p&gt;迁移博客的工作量要比从头开始搭建简单很多，很多插件的服务端配置都不需要重新设置，只需要在本地做
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://songshanshi.github.io/2019/07/28/hello-world/"/>
    <id>https://songshanshi.github.io/2019/07/28/hello-world/</id>
    <published>2019-07-27T16:00:00.000Z</published>
    <updated>2019-07-28T10:40:49.137Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      helloworld
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ddctf解题记录</title>
    <link href="https://songshanshi.github.io/2019/04/16/ddctf/"/>
    <id>https://songshanshi.github.io/2019/04/16/ddctf/</id>
    <published>2019-04-16T12:53:50.148Z</published>
    <updated>2019-07-28T08:44:52.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="reverse-1"><a href="#reverse-1" class="headerlink" title="reverse 1"></a>reverse 1</h3><p>使用ollydbg调试<br>这个题就是字符串替换也可以写一个脚本在ascii码的十六进制直接做运算，我这里为了速度快直接输入存在的ascii字符的  一一对应<br>这道题需要配置的是DDCTF{reverseME}   找到对应的一一匹配就是flag<br>=&lt;;:9876543210/.-,+*)(‘&amp;%$][ZYXWVUTSRQPONMLKJIHGFEDCBA”<br>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ[]“</p><p>abcdefghijklmdcbpqrstyz#!B<br>=&lt;;:987654321:;&lt;.-,+*%${}\</p><h3 id="DDCTF逆向二"><a href="#DDCTF逆向二" class="headerlink" title="DDCTF逆向二"></a>DDCTF逆向二</h3><p>脱壳   首先文件有一层asp壳  由于只是业余逆向就不手脱了，用<br>ASPack Stripper这个工具</p><h4 id="总体分析"><a href="#总体分析" class="headerlink" title="总体分析"></a>总体分析</h4><p>脱完壳拉进ollydbg进行调试<br>首先总结初步调试的</p><ul><li>输入字符数是偶数<br>输入的字符57 - 65     &gt;48     &lt;70<br>可以输入ABCDEF1234567890</li><li>最后将输入的值进行转换后与reverse+进行比较</li><li>python模块itertools的排列组合函数模拟所有输入的所有情况</li></ul><h4 id="输入测试"><a href="#输入测试" class="headerlink" title="输入测试"></a>输入测试</h4><p>以下是几组测试输入的值转换后的变化情况</p><p>1234567890<br>EjRWeJA=</p><p>1234567890ABCDEF<br>EjrWeJCrze8=</p><p>FEDCBA0987654321<br>/ty6CYdlQyE=</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><p>使用0x401240这个函数对输入过滤<br><img src="/2019/04/16/ddctf/QQ截图20190416190048.png" alt="Alt text"></p><p>接着单步往下执行<br>发现输入的字符主要在<br><img src="/2019/04/16/ddctf/QQ截图20190416191121.png" alt="Alt text"><br>这个函数进行变换<br>步入进去这个函数<br><img src="/2019/04/16/ddctf/QQ图片20190416193040.png" alt="Alt text"></p><p>将计算数来的值在0x403020里面对应找到的值再与0x76异或<br><img src="/2019/04/16/ddctf/QQ图片20190416201046.png" alt="Alt text"><br>解析出来是</p><p><img src="/2019/04/16/ddctf/QQ图片20190416202957.png" alt="Alt text"></p><p>最后将转换完的字符串与reverse+比较<br><img src="/2019/04/16/ddctf/QQ截图20190416202656.png" alt="Alt text"></p><h5 id="多次测试最后总结"><a href="#多次测试最后总结" class="headerlink" title="多次测试最后总结"></a>多次测试最后总结</h5><ul><li>这个循环的输入是6个字符串为一组。输出是4个字符串<br>所以我们输入是十二个字符</li></ul><p>题解奉上<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">cover = [<span class="number">0x37</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x32</span>,<span class="number">0x33</span>,<span class="number">0x30</span>,<span class="number">0x31</span>,<span class="number">0x3E</span>,<span class="number">0x3F</span>,<span class="number">0x3C</span>,<span class="number">0x3D</span>,<span class="number">0x3A</span>,<span class="number">0x3B</span>,<span class="number">0x38</span>,<span class="number">0x39</span>,<span class="number">0x26</span>,<span class="number">0x27</span>,<span class="number">0x24</span>,<span class="number">0x25</span>,<span class="number">0x22</span>,<span class="number">0x23</span>,<span class="number">0x20</span>,<span class="number">0x21</span>,<span class="number">0x2E</span>,<span class="number">0x2F</span>,<span class="number">0x2C</span>,<span class="number">0x17</span>,<span class="number">0x14</span>,<span class="number">0x15</span>,<span class="number">0x12</span>,<span class="number">0x13</span>,<span class="number">0x10</span></span><br><span class="line">,<span class="number">0x11</span>,<span class="number">0x1E</span>,<span class="number">0x1F</span>,<span class="number">0x1C</span>,<span class="number">0x1D</span>,<span class="number">0x1A</span>,<span class="number">0x1B</span>,<span class="number">0x18</span>,<span class="number">0x19</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0x04</span>,<span class="number">0x05</span>,<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x00</span></span><br><span class="line">,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x0F</span>,<span class="number">0x0C</span>,<span class="number">0x46</span>,<span class="number">0x47</span>,<span class="number">0x44</span>,<span class="number">0x45</span>,<span class="number">0x42</span>,<span class="number">0x43</span>,<span class="number">0x40</span>,<span class="number">0x41</span>,<span class="number">0x4E</span>,<span class="number">0x4F</span>,<span class="number">0x5D</span>,<span class="number">0x59</span></span><br><span class="line">,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x1B</span>,<span class="number">0x2B</span>,<span class="number">0x00</span>,<span class="number">0xB8</span>,<span class="number">0x2E</span>,<span class="number">0x2B</span>,<span class="number">0x00</span>]</span><br><span class="line">cc = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">input_ = list(itertools.product([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>],repeat = <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(input_)):</span><br><span class="line">    </span><br><span class="line">    a = int(str(input_[i][<span class="number">0</span>])+str(input_[i][<span class="number">1</span>]),<span class="number">16</span>)</span><br><span class="line">    one = a&gt;&gt;<span class="number">0x2</span></span><br><span class="line">    </span><br><span class="line">    b = int(str(input_[i][<span class="number">2</span>])+str(input_[i][<span class="number">3</span>]),<span class="number">16</span>)</span><br><span class="line">    tmp = (a&amp;<span class="number">0x3</span>)&lt;&lt;<span class="number">0x4</span></span><br><span class="line">    tmp_1 = b&gt;&gt;<span class="number">0x4</span></span><br><span class="line">    two = tmp_1+tmp</span><br><span class="line"></span><br><span class="line">    c = int(str(input_[i][<span class="number">4</span>])+str(input_[i][<span class="number">5</span>]),<span class="number">16</span>)</span><br><span class="line">    tmp_2 = ((b&amp;<span class="number">0xF</span>)*<span class="number">2</span>)*<span class="number">2</span></span><br><span class="line">    tmp_3 = c&gt;&gt;<span class="number">0x6</span></span><br><span class="line">    three = tmp_2+tmp_3</span><br><span class="line">    </span><br><span class="line">    four = c&amp;<span class="number">0x3F</span></span><br><span class="line"></span><br><span class="line">    fuzz = chr(cover[one]^<span class="number">0x76</span>) + chr(cover[two]^<span class="number">0x76</span>) + chr(cover[three]^<span class="number">0x76</span>) + chr(cover[four]^<span class="number">0x76</span>)</span><br><span class="line">    <span class="keyword">if</span>(fuzz ==<span class="string">"reve"</span> <span class="keyword">or</span> fuzz ==<span class="string">"rse+"</span>):</span><br><span class="line">        <span class="keyword">print</span> str(hex(a))+str(hex(b))+str(hex(c))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;reverse-1&quot;&gt;&lt;a href=&quot;#reverse-1&quot; class=&quot;headerlink&quot; title=&quot;reverse 1&quot;&gt;&lt;/a&gt;reverse 1&lt;/h3&gt;&lt;p&gt;使用ollydbg调试&lt;br&gt;这个题就是字符串替换也可以写一个脚本在ascii码的十
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用ssh反向代理+nginx实现外网连接内网服务器</title>
    <link href="https://songshanshi.github.io/2018/11/30/%E4%BD%BF%E7%94%A8ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86+nginx%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://songshanshi.github.io/2018/11/30/使用ssh反向代理+nginx实现外网连接内网服务器/</id>
    <published>2018-11-30T03:25:16.454Z</published>
    <updated>2018-11-30T03:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-准备条件"><a href="#一-准备条件" class="headerlink" title="一.准备条件"></a>一.准备条件</h3><p>机器        -ip-用户-主机名-备注<br>A    -10.10.10.128     -    root        www    -    位于内网的目标服务器<br>B    -123.123.123.123 -root  vultr    - 位于公网的服务器<br>C - 192.168.1.1 - root - 123- 可以 访问公网的客户机</p><h3 id="二-方案"><a href="#二-方案" class="headerlink" title="二.方案"></a>二.方案</h3><p>简单的说：在A机器上做到B机器的反向代理，将A机器上的服务端口映射到B机器的本地端口，然后使用nginx实现将本地端口转发到80(http)服务端口。</p><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>在AB机器上安装好ssh客户端和服务端 ，机器c上装上浏览器<br>在B机器上装好nginx，测试使用完好</p><h4 id="2-需要使用的ssh参数"><a href="#2-需要使用的ssh参数" class="headerlink" title="2.需要使用的ssh参数"></a>2.需要使用的ssh参数</h4><p>反向代理 <figure class="highlight plain"><figcaption><span>-fCNR ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正向代理```ssh -fCNL</span><br></pre></td></tr></table></figure></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-f 后台执行ssh指令</span><br><span class="line">-C 允许压缩数据</span><br><span class="line">-N 不执行远程指令</span><br><span class="line">-R 将远程主机(服务器)的某个端口转发到本地主机指定的端口</span><br><span class="line">-L 将本地机(客户机)的某个端口转发到远端指定机器的指定端口</span><br><span class="line">-p 指定远程主机的端口</span><br></pre></td></tr></table></figure><h4 id="3-建立A到B的反向代理"><a href="#3-建立A到B的反向代理" class="headerlink" title="3.建立A到B的反向代理"></a>3.建立A到B的反向代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNR [B机器IP或省略]:[B机器端口]:[A机器的IP]:[A机器的sshd端口] [登录B机器的用户名@B机器的IP] -p [B机器的sshd端口]</span><br></pre></td></tr></table></figure><p>A机器的服务端口是4000，反向代理到B机器的4001端口，在A机器上操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNR 4001:localhost:4000 -o ServerAliveInterval=60 root@123.123.123.123 -p 22</span><br></pre></td></tr></table></figure></p><ul><li>注：-o ServerAliveInterval=60表示服务器B每隔60秒发送一次数据给服务器A，以便ssh连接不会因为超时而断开连接.<br>然后这里之前要先实现A机器到B机器的ssh免密码登录，检查是否成功建立连接可以在A机器上<figure class="highlight plain"><figcaption><span>localhost:4001```或者是可以```netstat -antpul |grep '127.0.0.1:4001'```来确认机器A到B的反向连接是否建立成功。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 4.使用nginx实现本地端口的转发</span><br><span class="line">在A机器上 ```vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></li></ul><p>将下面配置信息添加到上面<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">       proxy_pass http://localhost:<span class="number">4000</span>;</span><br><span class="line">       proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">       proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">       proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">       proxy_redirect off;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>然后启动nginx，就可以成功将内网服务搭载公网了，使用C机器访问公网ip，这里还有就是一定要注意配置防火墙规则等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure></p><p>本文主要引用<a href="https://blog.csdn.net/u012843189/article/details/79522738" target="_blank" rel="noopener">这个博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-准备条件&quot;&gt;&lt;a href=&quot;#一-准备条件&quot; class=&quot;headerlink&quot; title=&quot;一.准备条件&quot;&gt;&lt;/a&gt;一.准备条件&lt;/h3&gt;&lt;p&gt;机器        -ip-用户-主机名-备注&lt;br&gt;A    -10.10.10.128     -   
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次将ctfd搭建到校园网的centos主机上</title>
    <link href="https://songshanshi.github.io/2018/11/30/ctfd%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://songshanshi.github.io/2018/11/30/ctfd的搭建/</id>
    <published>2018-11-30T02:49:04.383Z</published>
    <updated>2018-11-30T02:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>看见其他学校的大佬都给学校搭建训练平台，羡慕不已，故我也搭一个练练手 嘻嘻。。</p><h3 id="ctfd的搭建"><a href="#ctfd的搭建" class="headerlink" title="ctfd的搭建"></a>ctfd的搭建</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git nginx mariadb mariadb-server Mysql-python python-pip</span><br></pre></td></tr></table></figure><p>打开mariadb<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure></p><p>设置密码<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure></p><h4 id="下载设置ctfd框架"><a href="#下载设置ctfd框架" class="headerlink" title="下载设置ctfd框架"></a>下载设置ctfd框架</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/isislab/CTFd.git</span><br></pre></td></tr></table></figure><p>这里可能需要翻墙。。</p><p>下载完后进入到CTFd目录<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./prepare.sh</span><br><span class="line">python3 serve.py  <span class="comment"># 如果出现缺少库的话pip install安装相应的库</span></span><br></pre></td></tr></table></figure></p><p>我看其他教程还要：</p><ul><li>找到SQLALCHEMY_DATABASE_URI这一参数，然后更改为：SQLALCHEMY_DATABASE_URI = ‘mysql://root:你的密码@localhost/CTFd?charset=utf8’找到HOST参数，更改为HOST = “你的服务器IP”</li></ul><p>但是我并没有做好像直接接就成功了 ~(≧▽≦)/~。。<br>然后可以在MySQL里看到出现CTFd的数据库</p><p>然后在当前目录下运行<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn --bind <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">4000</span> -w <span class="number">1</span> <span class="string">"CTFd:create_app()"</span></span><br></pre></td></tr></table></figure></p><p>在成功后，访问你的IP:4000就可以看到网页了，如果发现访问不了，看下你的防火墙，或者安全组配置里是否开启了相应端口</p><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>弄完CTFd后访问，我发现，巨卡，是真的卡，于是想到把最近学到nginx加上，好了许多<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p><p>修改<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location /&#123;</span><br><span class="line">proxy_pass http://localhost:<span class="number">4000</span>;</span><br><span class="line"></span><br><span class="line">proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">proxy_redirect off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置完成<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nginx -t <span class="comment"># 检测语法</span></span><br><span class="line">nginx -s reload <span class="comment"># 重载</span></span><br><span class="line">systemctl enable nginx</span><br><span class="line">systemctl enable mariabd</span><br><span class="line">systemctl start nginx </span><br><span class="line">gunicorn --bind <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">4000</span> -w <span class="number">1</span> <span class="string">"CTFd:create_app()"</span></span><br></pre></td></tr></table></figure></p><p>最后一定要配置要防火墙安全策略之类的东西<br>firewall-cmd –add-port=4000/tcp –permanent     ##永久添加80端口<br>流畅了吧，兄弟 ●０● 。这个gunicorn的命令一定要进CTFd目录输入<br>ojbk  ^O^ </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看见其他学校的大佬都给学校搭建训练平台，羡慕不已，故我也搭一个练练手 嘻嘻。。&lt;/p&gt;
&lt;h3 id=&quot;ctfd的搭建&quot;&gt;&lt;a href=&quot;#ctfd的搭建&quot; class=&quot;headerlink&quot; title=&quot;ctfd的搭建&quot;&gt;&lt;/a&gt;ctfd的搭建&lt;/h3&gt;&lt;h4 id
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ctf交流群的加群题</title>
    <link href="https://songshanshi.github.io/2018/11/01/ctf%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%85%A5%E7%BE%A4/"/>
    <id>https://songshanshi.github.io/2018/11/01/ctf交流群入群/</id>
    <published>2018-11-01T14:34:48.065Z</published>
    <updated>2018-11-01T14:36:36.825Z</updated>
    
    <content type="html"><![CDATA[<h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><p><a href="https://pan.baidu.com/s/14YsPdaY5J7iM05Yn11Q8rQ" target="_blank" rel="noopener">题目下载</a><br>Tips：<br><a href="https://processor.pub/2017/03/22/0CTF-2017-python%E9%80%86%E5%90%91/" target="_blank" rel="noopener">https://processor.pub/2017/03/22/0CTF-2017-python%E9%80%86%E5%90%91/</a></p><p>题目中有一个pyc文件<br>先用Easy Python Decompiler将文件反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Embedded file name: test.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">part_1 = <span class="string">'cmFnZVq'</span></span><br><span class="line">part_2 = <span class="string">'95b3Vy'</span></span><br><span class="line">part_3 = <span class="string">'X2RyZWFt'</span></span><br><span class="line">part_4 = <span class="string">'ISEh'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>--- <span class="title">This</span> <span class="title">code</span> <span class="title">section</span> <span class="title">failed</span>:</span> ---</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> LOAD_GLOBAL              <span class="keyword">None</span></span><br><span class="line"><span class="number">3</span>&lt;<span class="number">153</span>&gt;             <span class="keyword">None</span></span><br><span class="line"><span class="number">6</span>SLICE+<span class="number">2</span>           <span class="keyword">None</span></span><br><span class="line"><span class="number">7</span>&lt;<span class="number">151</span>&gt;             <span class="keyword">None</span></span><br><span class="line"><span class="number">10</span>BINARY_ADD        <span class="keyword">None</span></span><br><span class="line"><span class="number">11</span>&lt;<span class="number">151</span>&gt;             <span class="keyword">None</span></span><br><span class="line"><span class="number">14</span>BINARY_ADD        <span class="keyword">None</span></span><br><span class="line"><span class="number">15</span>&lt;<span class="number">151</span>&gt;             <span class="keyword">None</span></span><br><span class="line"><span class="number">18</span>&lt;<span class="number">153</span>&gt;             <span class="keyword">None</span></span><br><span class="line"><span class="number">21</span>BINARY_MULTIPLY   <span class="keyword">None</span></span><br><span class="line"><span class="number">22</span>BINARY_ADD        <span class="keyword">None</span></span><br><span class="line"><span class="number">23</span>STORE_FAST        <span class="string">'secret'</span></span><br><span class="line"></span><br><span class="line"><span class="number">26</span>&lt;<span class="number">151</span>&gt;             <span class="keyword">None</span></span><br><span class="line"><span class="number">29</span>LOAD_ATTR         <span class="string">'b64decode'</span></span><br><span class="line"><span class="number">32</span>LOAD_FAST         <span class="string">'secret'</span></span><br><span class="line"><span class="number">35</span>CALL_FUNCTION_1   <span class="keyword">None</span></span><br><span class="line"><span class="number">38</span>STORE_FAST        <span class="string">'text'</span></span><br><span class="line"></span><br><span class="line"><span class="number">41</span>LOAD_FAST         <span class="string">'text'</span></span><br><span class="line"><span class="number">44</span>PRINT_ITEM        <span class="keyword">None</span></span><br><span class="line"><span class="number">45</span>PRINT_NEWLINE_CONT <span class="keyword">None</span></span><br><span class="line"><span class="number">46</span>&lt;<span class="number">153</span>&gt;             <span class="keyword">None</span></span><br><span class="line"><span class="number">49</span>RETURN_VALUE      <span class="keyword">None</span></span><br><span class="line"><span class="number">-1</span>RETURN_LAST       <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">Syntax error at <span class="keyword">or</span> near `&lt;<span class="number">151</span>&gt;<span class="string">' token at offset 0</span></span><br></pre></td></tr></table></figure><p>可见有两个指令是不能识别<br>用python中的dis，和marshal 进行调试<br>发现文件的前四位是magic number，用来识别python版本，接着的四位为时间戳<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> dis,marshal</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f=open(<span class="string">"/opt/crypt.pyc"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">4</span>)</span><br><span class="line"><span class="string">'\x03\xf3\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">4</span>)</span><br><span class="line"><span class="string">'\xf6\xa1$['</span></span><br></pre></td></tr></table></figure></p><p>接下来是读取opcode，发现opcode逻辑不对，所以修改opcode来还原函数算法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>code = marshal.load(f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>code.co_consts</span><br><span class="line">(<span class="number">-1</span>, <span class="keyword">None</span>, <span class="string">'cmFnZVq'</span>, <span class="string">'95b3Vy'</span>, <span class="string">'X2RyZWFt'</span>, <span class="string">'ISEh'</span>, &lt;code object decode at <span class="number">0x7fb03916ca30</span>, file <span class="string">"test.py"</span>, line <span class="number">14</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec = code.co_consts[<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(dec.co_code)</span><br><span class="line">          <span class="number">0</span> &lt;<span class="number">151</span>&gt;               <span class="number">0</span></span><br><span class="line">          <span class="number">3</span> &lt;<span class="number">153</span>&gt;               <span class="number">1</span></span><br><span class="line">          <span class="number">6</span> SLICE+<span class="number">2</span></span><br><span class="line">          <span class="number">7</span> &lt;<span class="number">151</span>&gt;               <span class="number">1</span></span><br><span class="line">         <span class="number">10</span> BINARY_ADD</span><br><span class="line">         <span class="number">11</span> &lt;<span class="number">151</span>&gt;               <span class="number">2</span></span><br><span class="line">         <span class="number">14</span> BINARY_ADD</span><br><span class="line">         <span class="number">15</span> &lt;<span class="number">151</span>&gt;               <span class="number">3</span></span><br><span class="line">         <span class="number">18</span> &lt;<span class="number">153</span>&gt;               <span class="number">2</span></span><br><span class="line">         <span class="number">21</span> BINARY_MULTIPLY</span><br><span class="line">         <span class="number">22</span> BINARY_ADD</span><br><span class="line">         <span class="number">23</span> STORE_FAST          <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">         <span class="number">26</span> &lt;<span class="number">151</span>&gt;               <span class="number">4</span></span><br><span class="line">         <span class="number">29</span> LOAD_ATTR           <span class="number">5</span> (<span class="number">5</span>)</span><br><span class="line">         <span class="number">32</span> LOAD_FAST           <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">         <span class="number">35</span> CALL_FUNCTION       <span class="number">1</span></span><br><span class="line">         <span class="number">38</span> STORE_FAST          <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">         <span class="number">41</span> LOAD_FAST           <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">         <span class="number">44</span> PRINT_ITEM</span><br><span class="line">         <span class="number">45</span> PRINT_NEWLINE</span><br><span class="line">         <span class="number">46</span> &lt;<span class="number">153</span>&gt;               <span class="number">0</span></span><br><span class="line">         <span class="number">49</span> RETURN_VALUE</span><br></pre></td></tr></table></figure></p><p>然后查看有关函数的信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec.co_names</span><br><span class="line">(<span class="string">'part_1'</span>, <span class="string">'part_2'</span>, <span class="string">'part_3'</span>, <span class="string">'part_4'</span>, <span class="string">'base64'</span>, <span class="string">'b64decode'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec.co_varnames</span><br><span class="line">(<span class="string">'secret'</span>, <span class="string">'text'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec.co_consts</span><br><span class="line">(<span class="keyword">None</span>, <span class="number">-1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>发现<151>这个指令使用的传入值0，1，2，3，4。而part的几个值是在函数的外面，猜想是LOAD_GLOBAL这个指令，<151>这个指令使用传入的值0，1，2. 调用的是varnames的值。猜想是LOAD_CONST指令，<br>参考：<a href="https://github.com/python/cpython/blob/master/Include/opcode.h" target="_blank" rel="noopener">https://github.com/python/cpython/blob/master/Include/opcode.h</a><br><a href="https://docs.python.org/2/library/dis.html#opcode-BUILD_SET" target="_blank" rel="noopener">https://docs.python.org/2/library/dis.html#opcode-BUILD_SET</a><br>读常量用的是“100”，而里面是“153”，读取全局变量是“116”<br>使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(dec.co_code.replace(<span class="string">"\x99"</span>,<span class="string">"\x64"</span>).replace(<span class="string">"\x97"</span>,<span class="string">"\x74"</span>))</span><br><span class="line">          <span class="number">0</span> LOAD_GLOBAL         <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">          <span class="number">3</span> LOAD_CONST          <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">          <span class="number">6</span> SLICE+<span class="number">2</span></span><br><span class="line">          <span class="number">7</span> LOAD_GLOBAL         <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">         <span class="number">10</span> BINARY_ADD</span><br><span class="line">         <span class="number">11</span> LOAD_GLOBAL         <span class="number">2</span> (<span class="number">2</span>)</span><br><span class="line">         <span class="number">14</span> BINARY_ADD</span><br><span class="line">         <span class="number">15</span> LOAD_GLOBAL         <span class="number">3</span> (<span class="number">3</span>)</span><br><span class="line">         <span class="number">18</span> LOAD_CONST          <span class="number">2</span> (<span class="number">2</span>)</span><br><span class="line">         <span class="number">21</span> BINARY_MULTIPLY</span><br><span class="line">         <span class="number">22</span> BINARY_ADD</span><br><span class="line">         <span class="number">23</span> STORE_FAST          <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">         <span class="number">26</span> LOAD_GLOBAL         <span class="number">4</span> (<span class="number">4</span>)</span><br><span class="line">         <span class="number">29</span> LOAD_ATTR           <span class="number">5</span> (<span class="number">5</span>)</span><br><span class="line">         <span class="number">32</span> LOAD_FAST           <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">         <span class="number">35</span> CALL_FUNCTION       <span class="number">1</span></span><br><span class="line">         <span class="number">38</span> STORE_FAST          <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">         <span class="number">41</span> LOAD_FAST           <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">         <span class="number">44</span> PRINT_ITEM</span><br><span class="line">         <span class="number">45</span> PRINT_NEWLINE</span><br><span class="line">         <span class="number">46</span> LOAD_CONST          <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">         <span class="number">49</span> RETURN_VALUE</span><br></pre></td></tr></table></figure></151></151></p><p>参考：<a href="http://anhkgg.com/python-bytecode/" target="_blank" rel="noopener">http://anhkgg.com/python-bytecode/</a><br>还原程序的加密部分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">decode()</span><br><span class="line">secret=part_1[:<span class="number">-1</span>]+part_2+part_3+part_4</span><br><span class="line">text=b64decode(secret)</span><br><span class="line"><span class="keyword">return</span> test</span><br></pre></td></tr></table></figure></p><p>payload.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">part_1 = <span class="string">'cmFnZVq'</span></span><br><span class="line">part_2 = <span class="string">'95b3Vy'</span></span><br><span class="line">part_3 = <span class="string">'X2RyZWFt'</span></span><br><span class="line">part_4 = <span class="string">'ISEh'</span></span><br><span class="line"></span><br><span class="line">secret=part_1[:<span class="number">-1</span>]+part_2+part_3+part_4</span><br><span class="line"></span><br><span class="line">text=base64.b64decode(secret)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure></p><p>解密得到<br>rage_your_dream!!!</p><p>其他题期待更新。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerlink&quot; title=&quot;misc&quot;&gt;&lt;/a&gt;misc&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/14YsPdaY5J7iM05Yn11Q8rQ&quot; targ
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Panther ctf</title>
    <link href="https://songshanshi.github.io/2018/10/08/Panther%20CTF/"/>
    <id>https://songshanshi.github.io/2018/10/08/Panther CTF/</id>
    <published>2018-10-08T14:35:16.000Z</published>
    <updated>2018-10-08T15:45:02.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次写writeup开始记录在我的博客<br>这次没有做一道题就写writeup所以有些题忘了，<br>下次比赛一定做一道写一道writeup</p><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="你会解压吗"><a href="#你会解压吗" class="headerlink" title="你会解压吗"></a>你会解压吗</h4><p><a href="https://pan.baidu.com/s/14LHEPaYgXaq0XKf7k0aO8g" target="_blank" rel="noopener">flag99.zip</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">for i in &#123;1..100&#125;</span><br><span class="line">do</span><br><span class="line">x=$((100-$i))</span><br><span class="line">unzip ./flag$x.zip</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h4 id="zzzzip"><a href="#zzzzip" class="headerlink" title="zzzzip?"></a>zzzzip?</h4><p><a href="https://pan.baidu.com/s/14LHEPaYgXaq0XKf7k0aO8g" target="_blank" rel="noopener">flag.zip</a></p><p>用ziperello爆破出5位的密码<br>然后用十六进制编辑器发现flag</p><h4 id="So-many-flag"><a href="#So-many-flag" class="headerlink" title="So many flag!"></a>So many flag!</h4><p><a href="https://pan.baidu.com/s/14LHEPaYgXaq0XKf7k0aO8g" target="_blank" rel="noopener">lag .txt</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">file=open(<span class="string">"E:\\flag.txt"</span>,mode=<span class="string">"r"</span>)</span><br><span class="line"></span><br><span class="line">flag=file.read()</span><br><span class="line">flag1=re.split(<span class="string">r"&#125;pctf&#123;"</span>,flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag1:</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    <span class="keyword">if</span> len(i)==<span class="number">20</span>:</span><br><span class="line">        a=re.match(<span class="string">r"^[a-z][A-Z][0-9].+[a-z][A-Z][a-z]$"</span>,i)</span><br><span class="line">        print(a)</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(flag1)</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><h4 id="出题人的心思"><a href="#出题人的心思" class="headerlink" title="出题人的心思"></a>出题人的心思</h4><p><img src="/2018/10/08/Panther CTF/nick.png" alt="Alt text"><br>题目是一张jpg图片用binwalk打开发现还有一张png图片<br>然后用kali自带的分离工具将图片分开，再用十六进制改变png图片的高度，看到flag</p><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><h4 id="just-so-so"><a href="#just-so-so" class="headerlink" title="just so so!"></a>just so so!</h4><pre><code>题目描述:    密文：706374667b686868685f546831735f4833785f636f64657d答案格式: pctf{xxxxxxxxxxxxx}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ab=<span class="string">"70,63,74,66,7b,68,68,68,68,5f,54,68,31,73,5f,48,33,78,5f,63,6f,64,65,7d"</span></span><br><span class="line">ac=re.split(<span class="string">","</span>,<span class="string">"70,63,74,66,7b,68,68,68,68,5f,54,68,31,73,5f,48,33,78,5f,63,6f,64,65,7d"</span>)</span><br><span class="line"></span><br><span class="line">print(ac)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ac:</span><br><span class="line"></span><br><span class="line">    print(chr(eval(i)))</span><br></pre></td></tr></table></figure><p>pctf{hhhh_Th1S_H3x_code}</p><h4 id="被加密了的flag"><a href="#被加密了的flag" class="headerlink" title="被加密了的flag"></a>被加密了的flag</h4><pre><code>题目描述:    cpgs{Gu1f_1F_Ebg_1r}答案格式: pctf{xxxxxxxxxxxxx}</code></pre><p>忘记细节了，思路是26个字母表中间对折然后替换相应的字母<br>就转换出pctf了</p><h4 id="My-math-is-very-poor"><a href="#My-math-is-very-poor" class="headerlink" title="My math is very poor"></a>My math is very poor</h4><p>题目描述:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line">data = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">flag = [] <span class="comment">#[x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x]</span></span><br><span class="line">a = <span class="number">9</span></span><br><span class="line">b = <span class="number">13</span></span><br><span class="line"><span class="keyword">assert</span> len(flag) == <span class="number">17</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Encrypt : '</span>,</span><br><span class="line">    enc = <span class="string">''</span></span><br><span class="line">    enc_array = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(flag)):</span><br><span class="line">        tmp=(a*flag[i]+b)%<span class="number">26</span></span><br><span class="line">        enc_array.append(tmp)</span><br><span class="line">        enc += data[tmp]</span><br><span class="line">    <span class="keyword">print</span> enc <span class="comment"># yyynvjlpjccyxginp</span></span><br><span class="line">    <span class="keyword">print</span> enc_array </span><br><span class="line">|<span class="comment"># [24,24,24,13,21,9,11,15,9,2,2,24,23,6,8,13,15]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    encrypt()</span><br></pre></td></tr></table></figure></p><ul><li>答案格式: pctf{xxxxxxxxxxxxx}</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"> -*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase <span class="keyword">as</span> lowercase</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase <span class="keyword">as</span> uppercase</span><br><span class="line"></span><br><span class="line">frequencyTable = [<span class="number">4</span>, <span class="number">19</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">3</span>, \</span><br><span class="line">                  <span class="number">11</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">24</span>, <span class="number">22</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">21</span>, \</span><br><span class="line">                  <span class="number">10</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除预留的标点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本过滤</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_filter</span><span class="params">(text)</span>:</span></span><br><span class="line">    text = text.lower()</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text)):</span><br><span class="line">        <span class="keyword">if</span> lowercase.find(text[i]) != <span class="number">-1</span>:</span><br><span class="line">            result += text[i]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密部分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryption</span><span class="params">(plaintext, k1, k2)</span>:</span></span><br><span class="line">    plaintext = text_filter(plaintext)</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plaintext)):</span><br><span class="line">        index = lowercase.find(plaintext[i])</span><br><span class="line">        c_index = (k1 * index + k2) % <span class="number">26</span></span><br><span class="line">        result += uppercase[c_index]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密部分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_inverse</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    #求a关于模b的逆元</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span> <span class="keyword">and</span> b == <span class="number">0</span>):</span><br><span class="line">        x = <span class="number">1</span></span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xx, yy = get_inverse(b, a % b)</span><br><span class="line">        x = yy</span><br><span class="line">        y = xx - a // b * yy</span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decryption</span><span class="params">(k1, k2, ciphertext)</span>:</span></span><br><span class="line">    k3 = get_inverse(k1, <span class="number">26</span>)[<span class="number">0</span>]</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext)):</span><br><span class="line">        index = lowercase.find(ciphertext[i])</span><br><span class="line">        p_index = k3 * (index - k2) % <span class="number">26</span></span><br><span class="line">        result += lowercase[p_index]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ciphertext = <span class="string">"yyynvjlpjccyxginp"</span></span><br><span class="line">    print(Decryption(<span class="number">9</span>,<span class="number">13</span>,ciphertext))</span><br></pre></td></tr></table></figure><p>仿射密码看<a href="https://blog.csdn.net/sinat_34927324/article/details/79700703" target="_blank" rel="noopener">这个博客</a>的</p><p>其他题我也忘了。。。</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><h4 id="软件破解第一步"><a href="#软件破解第一步" class="headerlink" title="软件破解第一步"></a>软件破解第一步</h4><p><a href="https://pan.baidu.com/s/14LHEPaYgXaq0XKf7k0aO8g" target="_blank" rel="noopener">Reverse11.exe</a></p><p>用ida打开就有flag了嘿嘿</p><h4 id="come-on"><a href="#come-on" class="headerlink" title="come on!"></a>come on!</h4><p><a href="https://pan.baidu.com/s/14LHEPaYgXaq0XKf7k0aO8g" target="_blank" rel="noopener">flag_file.pyo</a></p><p>这是一个Python的编译后加了防反编译模块<br>用 easy Python Decompiler这个工具解开就可以看到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Embedded file name: /home/sliver/Documents/CTF/Python/python.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> py_compile</span><br><span class="line">py_compile.compile(<span class="string">'/home/sliver/Documents/CTF/Python/python.py'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(message)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        x = ord(i)</span><br><span class="line">        x = x - <span class="number">16</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">correct = <span class="string">'RFhZJU8hY09AaU9DZlJaVVNk'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Input flag:'</span></span><br><span class="line">flag = raw_input()</span><br><span class="line"><span class="keyword">if</span> encode(flag) == correct:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'correct,this is my flag'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'wrong'</span></span><br></pre></td></tr></table></figure><p>然后用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"p"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"RFhZJU8hY09AaU9DZlJaVVNk"</span>:</span><br><span class="line">    x=ord(i)</span><br><span class="line">    x=x+<span class="number">16</span></span><br><span class="line">    s+=chr(x)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>就可见flag</p><h4 id="input-flag"><a href="#input-flag" class="headerlink" title="input flag"></a>input flag</h4><p><a href="https://pan.baidu.com/s/14LHEPaYgXaq0XKf7k0aO8g" target="_blank" rel="noopener">Reverse3.exe</a><br>用ida打开f5大法 </p><p>发现DXY%O!cO@iOCfRZUSd 对flag进行处理后与这个字符串进行比较<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"p"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"DXY%O!cO@iOCfRZUSd"</span>:</span><br><span class="line">    x=ord(i)</span><br><span class="line">    x=x+<span class="number">16</span></span><br><span class="line">    s+=chr(x)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>可解出flag</p><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="为什么这么简单"><a href="#为什么这么简单" class="headerlink" title="为什么这么简单"></a>为什么这么简单</h4><pre><code>答案格式: pctf{xxxxxxxxxxxxx}题目链接: 题目链接</code></pre><p>[题目链接]<a href="http://47.94.4.84/web/web1abf20c91a442da48.php" target="_blank" rel="noopener">http://47.94.4.84/web/web1abf20c91a442da48.php</a></p><p>用hackbar  post一个比66666大的数 （最快的方法了）</p><h4 id="i’m-so-sad"><a href="#i’m-so-sad" class="headerlink" title="i’m so sad"></a>i’m so sad</h4><p><a href="http://101.200.58.30/test1.php" target="_blank" rel="noopener">http://101.200.58.30/test1.php</a></p><p>base64对字符串解码可看到代码<br>发送get请求a[]=1$b[]=2 得到flag</p><h4 id="php-is-best-language"><a href="#php-is-best-language" class="headerlink" title="php is best language!"></a>php is best language!</h4><p><a href="http://47.94.4.84/web/web25d47c5d8a6299792.php" target="_blank" rel="noopener">http://47.94.4.84/web/web25d47c5d8a6299792.php</a></p><p>用hackbar post<br>magic_keys[]=1可得flag</p><p>pctf结束</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;第一次写writeup开始记录在我的博客&lt;br&gt;这次没有做一道题就写writeup所以有些题忘了，&lt;br&gt;下次比赛一定做一道写一道write
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ubuntu18.4安装一些软件时出现 Unable to correct problems, you have held broken packages</title>
    <link href="https://songshanshi.github.io/2018/06/09/%E8%A7%A3%E5%86%B3%E5%8C%85%E6%8D%9F%E5%9D%8F%E9%94%99%E8%AF%AF/"/>
    <id>https://songshanshi.github.io/2018/06/09/解决包损坏错误/</id>
    <published>2018-06-09T11:34:35.583Z</published>
    <updated>2018-06-09T11:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在看《揭秘家用路由器0day漏洞挖掘技术》下了ubuntu18.4，感觉Ubuntu还是不错的，发现没有Python2（mmp），安装是出现了Unable to correct problems, you have held broken packages问题（附图一张）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Some packages could not be installed. This may mean that you have</span><br><span class="line">requested an impossible situation or <span class="keyword">if</span> you are using the unstable</span><br><span class="line">distribution that some required packages have not yet been created</span><br><span class="line">or been moved out of Incoming.</span><br><span class="line">The following information may <span class="built_in">help</span> to resolve the situation:</span><br><span class="line"></span><br><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> python : PreDepends: python-minimal (= 2.7.12-1~16.04) but it is not going to be installed</span><br><span class="line">          Depends: python2.7 (&gt;= 2.7.12-1~) but it is not going to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure><p>查了百度许多资料都是这么说</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get upgrade</span><br><span class="line"></span><br><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p>后来从<a href="https://askubuntu.com/questions/223237/unable-to-correct-problems-you-have-held-broken-packages" target="_blank" rel="noopener">这里</a><br>他这上面说aptitude解决，尝试后发现安装这个也有相同的问题，于是又用了下面的方法，成功了。<br>下面分享给大家：</p><p>用这条命令看你损坏的包然后卸载了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看包</span></span><br><span class="line">dpkg --get-selections | grep python</span><br><span class="line"><span class="comment">#卸载</span></span><br><span class="line">sudo apt-get remove libpython2.7</span><br><span class="line">sudo apt-get remove libpython2.7-minimal</span><br><span class="line">sudo apt-get remove libpython2.7-stdlib</span><br></pre></td></tr></table></figure></p><p>把有关的包都卸载了，让后再<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get insatll python</span><br></pre></td></tr></table></figure></p><p>我这里的python是其中一个出现问题的，如果童鞋在安装软件是出现这个错误按这个方法处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天在看《揭秘家用路由器0day漏洞挖掘技术》下了ubuntu18.4，感觉Ubuntu还是不错的，发现没有Python2（mmp），安装是出现了Unable to correct problems, you have held broken packages问题（附图一
      
    
    </summary>
    
    
  </entry>
  
</feed>
